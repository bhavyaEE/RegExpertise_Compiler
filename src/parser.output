Terminals unused in grammar

    T_TIMES
    T_DIVIDE
    T_PLUS
    T_MINUS
    SQU_LBRACKET
    SQU_RBRACKET
    COLON
    COMMA
    T_LESSTHAN
    T_GREATERTHAN
    T_LESS_EQUAL
    T_GREATER_EQUAL
    T_EQUAL
    T_NOT_EQUAL


State 69 conflicts: 1 shift/reduce


Grammar

    0 $accept: ROOT $end

    1 ROOT: root_program

    2 root_program: external_declaration
    3             | root_program external_declaration

    4 external_declaration: function_definition
    5                     | declaration

    6 function_definition: type_specifier NAME T_LBRACKET T_RBRACKET compound_statement

    7 initialisation_declarator: declarator
    8                          | NAME T_ASSIGN assignment_expression

    9 declaration_list: declaration
   10                 | declaration_list declaration

   11 declarator: NAME

   12 declaration: type_specifier SEMICOLON
   13            | type_specifier initialisation_declarator SEMICOLON

   14 primary_expression: NUMBER
   15                   | NAME
   16                   | T_LBRACKET expression T_RBRACKET

   17 postfix_expression: primary_expression

   18 add_expression: multiply_expression

   19 multiply_expression: postfix_expression

   20 compare_expression: add_expression

   21 equal_expression: compare_expression

   22 bitwise_expression: equal_expression

   23 logical_expression: bitwise_expression

   24 assignment_expression: logical_expression
   25                      | postfix_expression T_ASSIGN assignment_expression

   26 expression: assignment_expression

   27 statement: jump_statement
   28          | compound_statement
   29          | expression_statement
   30          | condition_statement
   31          | iteration_statement

   32 statement_list: statement
   33               | statement_list statement

   34 compound_statement: CUR_LBRACKET CUR_RBRACKET
   35                   | CUR_LBRACKET statement_list CUR_RBRACKET
   36                   | CUR_LBRACKET declaration_list CUR_RBRACKET
   37                   | CUR_LBRACKET declaration_list statement_list CUR_RBRACKET

   38 jump_statement: T_RETURN SEMICOLON
   39               | T_RETURN expression SEMICOLON

   40 expression_statement: expression SEMICOLON

   41 condition_statement: T_IF T_LBRACKET expression T_RBRACKET statement
   42                    | T_IF T_LBRACKET expression T_RBRACKET statement T_ELSE statement

   43 iteration_statement: T_WHILE T_LBRACKET expression T_RBRACKET statement

   44 type_specifier: T_INT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_ASSIGN (258) 8 25
    T_TIMES (259)
    T_DIVIDE (260)
    T_PLUS (261)
    T_MINUS (262)
    T_LBRACKET (263) 6 16 41 42 43
    T_RBRACKET (264) 6 16 41 42 43
    CUR_LBRACKET (265) 34 35 36 37
    CUR_RBRACKET (266) 34 35 36 37
    SQU_LBRACKET (267)
    SQU_RBRACKET (268)
    COLON (269)
    SEMICOLON (270) 12 13 38 39 40
    COMMA (271)
    T_LESSTHAN (272)
    T_GREATERTHAN (273)
    T_LESS_EQUAL (274)
    T_GREATER_EQUAL (275)
    T_EQUAL (276)
    T_NOT_EQUAL (277)
    T_INT (278) 44
    T_IF (279) 41 42
    T_ELSE (280) 42
    T_WHILE (281) 43
    T_RETURN (282) 38 39
    NAME <string> (283) 6 8 11 15
    NUMBER <number> (284) 14


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    ROOT (31)
        on left: 1
        on right: 0
    root_program <NodePtr> (32)
        on left: 2 3
        on right: 1 3
    external_declaration <NodePtr> (33)
        on left: 4 5
        on right: 2 3
    function_definition <NodePtr> (34)
        on left: 6
        on right: 4
    initialisation_declarator <NodePtr> (35)
        on left: 7 8
        on right: 13
    declaration_list <NodeVectorPtr> (36)
        on left: 9 10
        on right: 10 36 37
    declarator <NodePtr> (37)
        on left: 11
        on right: 7
    declaration <NodePtr> (38)
        on left: 12 13
        on right: 5 9 10
    primary_expression <NodePtr> (39)
        on left: 14 15 16
        on right: 17
    postfix_expression <NodePtr> (40)
        on left: 17
        on right: 19 25
    add_expression <NodePtr> (41)
        on left: 18
        on right: 20
    multiply_expression <NodePtr> (42)
        on left: 19
        on right: 18
    compare_expression <NodePtr> (43)
        on left: 20
        on right: 21
    equal_expression <NodePtr> (44)
        on left: 21
        on right: 22
    bitwise_expression <NodePtr> (45)
        on left: 22
        on right: 23
    logical_expression <NodePtr> (46)
        on left: 23
        on right: 24
    assignment_expression <NodePtr> (47)
        on left: 24 25
        on right: 8 25 26
    expression <NodePtr> (48)
        on left: 26
        on right: 16 39 40 41 42 43
    statement <NodePtr> (49)
        on left: 27 28 29 30 31
        on right: 32 33 41 42 43
    statement_list <NodeVectorPtr> (50)
        on left: 32 33
        on right: 33 35 37
    compound_statement <NodePtr> (51)
        on left: 34 35 36 37
        on right: 6 28
    jump_statement <NodePtr> (52)
        on left: 38 39
        on right: 27
    expression_statement <NodePtr> (53)
        on left: 40
        on right: 29
    condition_statement <NodePtr> (54)
        on left: 41 42
        on right: 30
    iteration_statement <NodePtr> (55)
        on left: 43
        on right: 31
    type_specifier <string> (56)
        on left: 44
        on right: 6 12 13


State 0

    0 $accept: . ROOT $end

    T_INT  shift, and go to state 1

    ROOT                  go to state 2
    root_program          go to state 3
    external_declaration  go to state 4
    function_definition   go to state 5
    declaration           go to state 6
    type_specifier        go to state 7


State 1

   44 type_specifier: T_INT .

    $default  reduce using rule 44 (type_specifier)


State 2

    0 $accept: ROOT . $end

    $end  shift, and go to state 8


State 3

    1 ROOT: root_program .
    3 root_program: root_program . external_declaration

    T_INT  shift, and go to state 1

    $default  reduce using rule 1 (ROOT)

    external_declaration  go to state 9
    function_definition   go to state 5
    declaration           go to state 6
    type_specifier        go to state 7


State 4

    2 root_program: external_declaration .

    $default  reduce using rule 2 (root_program)


State 5

    4 external_declaration: function_definition .

    $default  reduce using rule 4 (external_declaration)


State 6

    5 external_declaration: declaration .

    $default  reduce using rule 5 (external_declaration)


State 7

    6 function_definition: type_specifier . NAME T_LBRACKET T_RBRACKET compound_statement
   12 declaration: type_specifier . SEMICOLON
   13            | type_specifier . initialisation_declarator SEMICOLON

    SEMICOLON  shift, and go to state 10
    NAME       shift, and go to state 11

    initialisation_declarator  go to state 12
    declarator                 go to state 13


State 8

    0 $accept: ROOT $end .

    $default  accept


State 9

    3 root_program: root_program external_declaration .

    $default  reduce using rule 3 (root_program)


State 10

   12 declaration: type_specifier SEMICOLON .

    $default  reduce using rule 12 (declaration)


State 11

    6 function_definition: type_specifier NAME . T_LBRACKET T_RBRACKET compound_statement
    8 initialisation_declarator: NAME . T_ASSIGN assignment_expression
   11 declarator: NAME .

    T_ASSIGN    shift, and go to state 14
    T_LBRACKET  shift, and go to state 15

    $default  reduce using rule 11 (declarator)


State 12

   13 declaration: type_specifier initialisation_declarator . SEMICOLON

    SEMICOLON  shift, and go to state 16


State 13

    7 initialisation_declarator: declarator .

    $default  reduce using rule 7 (initialisation_declarator)


State 14

    8 initialisation_declarator: NAME T_ASSIGN . assignment_expression

    T_LBRACKET  shift, and go to state 17
    NAME        shift, and go to state 18
    NUMBER      shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 28


State 15

    6 function_definition: type_specifier NAME T_LBRACKET . T_RBRACKET compound_statement

    T_RBRACKET  shift, and go to state 29


State 16

   13 declaration: type_specifier initialisation_declarator SEMICOLON .

    $default  reduce using rule 13 (declaration)


State 17

   16 primary_expression: T_LBRACKET . expression T_RBRACKET

    T_LBRACKET  shift, and go to state 17
    NAME        shift, and go to state 18
    NUMBER      shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 31


State 18

   15 primary_expression: NAME .

    $default  reduce using rule 15 (primary_expression)


State 19

   14 primary_expression: NUMBER .

    $default  reduce using rule 14 (primary_expression)


State 20

   17 postfix_expression: primary_expression .

    $default  reduce using rule 17 (postfix_expression)


State 21

   19 multiply_expression: postfix_expression .
   25 assignment_expression: postfix_expression . T_ASSIGN assignment_expression

    T_ASSIGN  shift, and go to state 32

    $default  reduce using rule 19 (multiply_expression)


State 22

   20 compare_expression: add_expression .

    $default  reduce using rule 20 (compare_expression)


State 23

   18 add_expression: multiply_expression .

    $default  reduce using rule 18 (add_expression)


State 24

   21 equal_expression: compare_expression .

    $default  reduce using rule 21 (equal_expression)


State 25

   22 bitwise_expression: equal_expression .

    $default  reduce using rule 22 (bitwise_expression)


State 26

   23 logical_expression: bitwise_expression .

    $default  reduce using rule 23 (logical_expression)


State 27

   24 assignment_expression: logical_expression .

    $default  reduce using rule 24 (assignment_expression)


State 28

    8 initialisation_declarator: NAME T_ASSIGN assignment_expression .

    $default  reduce using rule 8 (initialisation_declarator)


State 29

    6 function_definition: type_specifier NAME T_LBRACKET T_RBRACKET . compound_statement

    CUR_LBRACKET  shift, and go to state 33

    compound_statement  go to state 34


State 30

   26 expression: assignment_expression .

    $default  reduce using rule 26 (expression)


State 31

   16 primary_expression: T_LBRACKET expression . T_RBRACKET

    T_RBRACKET  shift, and go to state 35


State 32

   25 assignment_expression: postfix_expression T_ASSIGN . assignment_expression

    T_LBRACKET  shift, and go to state 17
    NAME        shift, and go to state 18
    NUMBER      shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 36


State 33

   34 compound_statement: CUR_LBRACKET . CUR_RBRACKET
   35                   | CUR_LBRACKET . statement_list CUR_RBRACKET
   36                   | CUR_LBRACKET . declaration_list CUR_RBRACKET
   37                   | CUR_LBRACKET . declaration_list statement_list CUR_RBRACKET

    T_LBRACKET    shift, and go to state 17
    CUR_LBRACKET  shift, and go to state 33
    CUR_RBRACKET  shift, and go to state 37
    T_INT         shift, and go to state 1
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_RETURN      shift, and go to state 40
    NAME          shift, and go to state 18
    NUMBER        shift, and go to state 19

    declaration_list       go to state 41
    declaration            go to state 42
    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 43
    statement              go to state 44
    statement_list         go to state 45
    compound_statement     go to state 46
    jump_statement         go to state 47
    expression_statement   go to state 48
    condition_statement    go to state 49
    iteration_statement    go to state 50
    type_specifier         go to state 51


State 34

    6 function_definition: type_specifier NAME T_LBRACKET T_RBRACKET compound_statement .

    $default  reduce using rule 6 (function_definition)


State 35

   16 primary_expression: T_LBRACKET expression T_RBRACKET .

    $default  reduce using rule 16 (primary_expression)


State 36

   25 assignment_expression: postfix_expression T_ASSIGN assignment_expression .

    $default  reduce using rule 25 (assignment_expression)


State 37

   34 compound_statement: CUR_LBRACKET CUR_RBRACKET .

    $default  reduce using rule 34 (compound_statement)


State 38

   41 condition_statement: T_IF . T_LBRACKET expression T_RBRACKET statement
   42                    | T_IF . T_LBRACKET expression T_RBRACKET statement T_ELSE statement

    T_LBRACKET  shift, and go to state 52


State 39

   43 iteration_statement: T_WHILE . T_LBRACKET expression T_RBRACKET statement

    T_LBRACKET  shift, and go to state 53


State 40

   38 jump_statement: T_RETURN . SEMICOLON
   39               | T_RETURN . expression SEMICOLON

    T_LBRACKET  shift, and go to state 17
    SEMICOLON   shift, and go to state 54
    NAME        shift, and go to state 18
    NUMBER      shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 55


State 41

   10 declaration_list: declaration_list . declaration
   36 compound_statement: CUR_LBRACKET declaration_list . CUR_RBRACKET
   37                   | CUR_LBRACKET declaration_list . statement_list CUR_RBRACKET

    T_LBRACKET    shift, and go to state 17
    CUR_LBRACKET  shift, and go to state 33
    CUR_RBRACKET  shift, and go to state 56
    T_INT         shift, and go to state 1
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_RETURN      shift, and go to state 40
    NAME          shift, and go to state 18
    NUMBER        shift, and go to state 19

    declaration            go to state 57
    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 43
    statement              go to state 44
    statement_list         go to state 58
    compound_statement     go to state 46
    jump_statement         go to state 47
    expression_statement   go to state 48
    condition_statement    go to state 49
    iteration_statement    go to state 50
    type_specifier         go to state 51


State 42

    9 declaration_list: declaration .

    $default  reduce using rule 9 (declaration_list)


State 43

   40 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 59


State 44

   32 statement_list: statement .

    $default  reduce using rule 32 (statement_list)


State 45

   33 statement_list: statement_list . statement
   35 compound_statement: CUR_LBRACKET statement_list . CUR_RBRACKET

    T_LBRACKET    shift, and go to state 17
    CUR_LBRACKET  shift, and go to state 33
    CUR_RBRACKET  shift, and go to state 60
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_RETURN      shift, and go to state 40
    NAME          shift, and go to state 18
    NUMBER        shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 43
    statement              go to state 61
    compound_statement     go to state 46
    jump_statement         go to state 47
    expression_statement   go to state 48
    condition_statement    go to state 49
    iteration_statement    go to state 50


State 46

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 47

   27 statement: jump_statement .

    $default  reduce using rule 27 (statement)


State 48

   29 statement: expression_statement .

    $default  reduce using rule 29 (statement)


State 49

   30 statement: condition_statement .

    $default  reduce using rule 30 (statement)


State 50

   31 statement: iteration_statement .

    $default  reduce using rule 31 (statement)


State 51

   12 declaration: type_specifier . SEMICOLON
   13            | type_specifier . initialisation_declarator SEMICOLON

    SEMICOLON  shift, and go to state 10
    NAME       shift, and go to state 62

    initialisation_declarator  go to state 12
    declarator                 go to state 13


State 52

   41 condition_statement: T_IF T_LBRACKET . expression T_RBRACKET statement
   42                    | T_IF T_LBRACKET . expression T_RBRACKET statement T_ELSE statement

    T_LBRACKET  shift, and go to state 17
    NAME        shift, and go to state 18
    NUMBER      shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 63


State 53

   43 iteration_statement: T_WHILE T_LBRACKET . expression T_RBRACKET statement

    T_LBRACKET  shift, and go to state 17
    NAME        shift, and go to state 18
    NUMBER      shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 64


State 54

   38 jump_statement: T_RETURN SEMICOLON .

    $default  reduce using rule 38 (jump_statement)


State 55

   39 jump_statement: T_RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 65


State 56

   36 compound_statement: CUR_LBRACKET declaration_list CUR_RBRACKET .

    $default  reduce using rule 36 (compound_statement)


State 57

   10 declaration_list: declaration_list declaration .

    $default  reduce using rule 10 (declaration_list)


State 58

   33 statement_list: statement_list . statement
   37 compound_statement: CUR_LBRACKET declaration_list statement_list . CUR_RBRACKET

    T_LBRACKET    shift, and go to state 17
    CUR_LBRACKET  shift, and go to state 33
    CUR_RBRACKET  shift, and go to state 66
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_RETURN      shift, and go to state 40
    NAME          shift, and go to state 18
    NUMBER        shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 43
    statement              go to state 61
    compound_statement     go to state 46
    jump_statement         go to state 47
    expression_statement   go to state 48
    condition_statement    go to state 49
    iteration_statement    go to state 50


State 59

   40 expression_statement: expression SEMICOLON .

    $default  reduce using rule 40 (expression_statement)


State 60

   35 compound_statement: CUR_LBRACKET statement_list CUR_RBRACKET .

    $default  reduce using rule 35 (compound_statement)


State 61

   33 statement_list: statement_list statement .

    $default  reduce using rule 33 (statement_list)


State 62

    8 initialisation_declarator: NAME . T_ASSIGN assignment_expression
   11 declarator: NAME .

    T_ASSIGN  shift, and go to state 14

    $default  reduce using rule 11 (declarator)


State 63

   41 condition_statement: T_IF T_LBRACKET expression . T_RBRACKET statement
   42                    | T_IF T_LBRACKET expression . T_RBRACKET statement T_ELSE statement

    T_RBRACKET  shift, and go to state 67


State 64

   43 iteration_statement: T_WHILE T_LBRACKET expression . T_RBRACKET statement

    T_RBRACKET  shift, and go to state 68


State 65

   39 jump_statement: T_RETURN expression SEMICOLON .

    $default  reduce using rule 39 (jump_statement)


State 66

   37 compound_statement: CUR_LBRACKET declaration_list statement_list CUR_RBRACKET .

    $default  reduce using rule 37 (compound_statement)


State 67

   41 condition_statement: T_IF T_LBRACKET expression T_RBRACKET . statement
   42                    | T_IF T_LBRACKET expression T_RBRACKET . statement T_ELSE statement

    T_LBRACKET    shift, and go to state 17
    CUR_LBRACKET  shift, and go to state 33
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_RETURN      shift, and go to state 40
    NAME          shift, and go to state 18
    NUMBER        shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 43
    statement              go to state 69
    compound_statement     go to state 46
    jump_statement         go to state 47
    expression_statement   go to state 48
    condition_statement    go to state 49
    iteration_statement    go to state 50


State 68

   43 iteration_statement: T_WHILE T_LBRACKET expression T_RBRACKET . statement

    T_LBRACKET    shift, and go to state 17
    CUR_LBRACKET  shift, and go to state 33
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_RETURN      shift, and go to state 40
    NAME          shift, and go to state 18
    NUMBER        shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 43
    statement              go to state 70
    compound_statement     go to state 46
    jump_statement         go to state 47
    expression_statement   go to state 48
    condition_statement    go to state 49
    iteration_statement    go to state 50


State 69

   41 condition_statement: T_IF T_LBRACKET expression T_RBRACKET statement .
   42                    | T_IF T_LBRACKET expression T_RBRACKET statement . T_ELSE statement

    T_ELSE  shift, and go to state 71

    T_ELSE    [reduce using rule 41 (condition_statement)]
    $default  reduce using rule 41 (condition_statement)


State 70

   43 iteration_statement: T_WHILE T_LBRACKET expression T_RBRACKET statement .

    $default  reduce using rule 43 (iteration_statement)


State 71

   42 condition_statement: T_IF T_LBRACKET expression T_RBRACKET statement T_ELSE . statement

    T_LBRACKET    shift, and go to state 17
    CUR_LBRACKET  shift, and go to state 33
    T_IF          shift, and go to state 38
    T_WHILE       shift, and go to state 39
    T_RETURN      shift, and go to state 40
    NAME          shift, and go to state 18
    NUMBER        shift, and go to state 19

    primary_expression     go to state 20
    postfix_expression     go to state 21
    add_expression         go to state 22
    multiply_expression    go to state 23
    compare_expression     go to state 24
    equal_expression       go to state 25
    bitwise_expression     go to state 26
    logical_expression     go to state 27
    assignment_expression  go to state 30
    expression             go to state 43
    statement              go to state 72
    compound_statement     go to state 46
    jump_statement         go to state 47
    expression_statement   go to state 48
    condition_statement    go to state 49
    iteration_statement    go to state 50


State 72

   42 condition_statement: T_IF T_LBRACKET expression T_RBRACKET statement T_ELSE statement .

    $default  reduce using rule 42 (condition_statement)
