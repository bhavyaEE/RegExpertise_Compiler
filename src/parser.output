Terminals unused in grammar

    T_ASSIGN
    T_TIMES
    T_DIVIDE
    T_PLUS
    T_MINUS
    SQU_LBRACKET
    SQU_RBRACKET
    COLON
    T_LESSTHAN
    T_GREATERTHAN
    T_LESS_EQUAL
    T_GREATER_EQUAL
    T_EQUAL
    T_NOT_EQUAL


State 67 conflicts: 1 shift/reduce


Grammar

    0 $accept: ROOT $end

    1 ROOT: root_program

    2 root_program: external_declaration
    3             | root_program external_declaration

    4 external_declaration: function_definition
    5                     | declaration

    6 function_definition: type_specifier NAME T_LBRACKET T_RBRACKET compound_statement

    7 initialisation_declarator_list: initialisation_declarator
    8                               | initialisation_declarator_list COMMA initialisation_declarator

    9 initialisation_declarator: declarator

   10 declaration_list: declaration
   11                 | declaration_list declaration

   12 declarator: NAME

   13 declaration: type_specifier SEMICOLON
   14            | type_specifier initialisation_declarator_list SEMICOLON

   15 primary_expression: NUMBER
   16                   | NAME
   17                   | T_LBRACKET expression T_RBRACKET

   18 postfix_expression: primary_expression

   19 add_expression: multiply_expression

   20 multiply_expression: postfix_expression

   21 compare_expression: add_expression

   22 equal_expression: compare_expression

   23 bitwise_expression: equal_expression

   24 logical_expression: bitwise_expression

   25 assignment_expression: logical_expression

   26 expression: assignment_expression

   27 statement: jump_statement
   28          | compound_statement
   29          | expression_statement
   30          | condition_statement
   31          | iteration_statement

   32 statement_list: statement

   33 compound_statement: CUR_LBRACKET CUR_RBRACKET
   34                   | CUR_LBRACKET statement_list CUR_RBRACKET
   35                   | CUR_LBRACKET declaration_list CUR_RBRACKET
   36                   | CUR_LBRACKET declaration_list statement_list CUR_RBRACKET

   37 jump_statement: T_RETURN SEMICOLON
   38               | T_RETURN expression SEMICOLON

   39 expression_statement: expression SEMICOLON

   40 condition_statement: T_IF T_LBRACKET expression T_RBRACKET statement
   41                    | T_IF T_LBRACKET expression T_RBRACKET statement T_ELSE statement

   42 iteration_statement: T_WHILE T_LBRACKET expression T_RBRACKET statement

   43 type_specifier: T_INT


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    T_ASSIGN (258)
    T_TIMES (259)
    T_DIVIDE (260)
    T_PLUS (261)
    T_MINUS (262)
    T_LBRACKET (263) 6 17 40 41 42
    T_RBRACKET (264) 6 17 40 41 42
    CUR_LBRACKET (265) 33 34 35 36
    CUR_RBRACKET (266) 33 34 35 36
    SQU_LBRACKET (267)
    SQU_RBRACKET (268)
    COLON (269)
    SEMICOLON (270) 13 14 37 38 39
    COMMA (271) 8
    T_LESSTHAN (272)
    T_GREATERTHAN (273)
    T_LESS_EQUAL (274)
    T_GREATER_EQUAL (275)
    T_EQUAL (276)
    T_NOT_EQUAL (277)
    T_INT (278) 43
    T_IF (279) 40 41
    T_ELSE (280) 41
    T_WHILE (281) 42
    T_RETURN (282) 37 38
    NAME <string> (283) 6 12 16
    NUMBER <number> (284) 15


Nonterminals, with rules where they appear

    $accept (30)
        on left: 0
    ROOT (31)
        on left: 1
        on right: 0
    root_program <NodePtr> (32)
        on left: 2 3
        on right: 1 3
    external_declaration <NodePtr> (33)
        on left: 4 5
        on right: 2 3
    function_definition <NodePtr> (34)
        on left: 6
        on right: 4
    initialisation_declarator_list <NodeVectorPtr> (35)
        on left: 7 8
        on right: 8 14
    initialisation_declarator <NodePtr> (36)
        on left: 9
        on right: 7 8
    declaration_list <NodeVectorPtr> (37)
        on left: 10 11
        on right: 11 35 36
    declarator <NodePtr> (38)
        on left: 12
        on right: 9
    declaration <NodePtr> (39)
        on left: 13 14
        on right: 5 10 11
    primary_expression <NodePtr> (40)
        on left: 15 16 17
        on right: 18
    postfix_expression <NodePtr> (41)
        on left: 18
        on right: 20
    add_expression <NodePtr> (42)
        on left: 19
        on right: 21
    multiply_expression <NodePtr> (43)
        on left: 20
        on right: 19
    compare_expression <NodePtr> (44)
        on left: 21
        on right: 22
    equal_expression <NodePtr> (45)
        on left: 22
        on right: 23
    bitwise_expression <NodePtr> (46)
        on left: 23
        on right: 24
    logical_expression <NodePtr> (47)
        on left: 24
        on right: 25
    assignment_expression <NodePtr> (48)
        on left: 25
        on right: 26
    expression <NodePtr> (49)
        on left: 26
        on right: 17 38 39 40 41 42
    statement <NodePtr> (50)
        on left: 27 28 29 30 31
        on right: 32 40 41 42
    statement_list <NodePtr> (51)
        on left: 32
        on right: 34 36
    compound_statement <NodePtr> (52)
        on left: 33 34 35 36
        on right: 6 28
    jump_statement <NodePtr> (53)
        on left: 37 38
        on right: 27
    expression_statement <NodePtr> (54)
        on left: 39
        on right: 29
    condition_statement <NodePtr> (55)
        on left: 40 41
        on right: 30
    iteration_statement <NodePtr> (56)
        on left: 42
        on right: 31
    type_specifier <string> (57)
        on left: 43
        on right: 6 13 14


State 0

    0 $accept: . ROOT $end

    T_INT  shift, and go to state 1

    ROOT                  go to state 2
    root_program          go to state 3
    external_declaration  go to state 4
    function_definition   go to state 5
    declaration           go to state 6
    type_specifier        go to state 7


State 1

   43 type_specifier: T_INT .

    $default  reduce using rule 43 (type_specifier)


State 2

    0 $accept: ROOT . $end

    $end  shift, and go to state 8


State 3

    1 ROOT: root_program .
    3 root_program: root_program . external_declaration

    T_INT  shift, and go to state 1

    $default  reduce using rule 1 (ROOT)

    external_declaration  go to state 9
    function_definition   go to state 5
    declaration           go to state 6
    type_specifier        go to state 7


State 4

    2 root_program: external_declaration .

    $default  reduce using rule 2 (root_program)


State 5

    4 external_declaration: function_definition .

    $default  reduce using rule 4 (external_declaration)


State 6

    5 external_declaration: declaration .

    $default  reduce using rule 5 (external_declaration)


State 7

    6 function_definition: type_specifier . NAME T_LBRACKET T_RBRACKET compound_statement
   13 declaration: type_specifier . SEMICOLON
   14            | type_specifier . initialisation_declarator_list SEMICOLON

    SEMICOLON  shift, and go to state 10
    NAME       shift, and go to state 11

    initialisation_declarator_list  go to state 12
    initialisation_declarator       go to state 13
    declarator                      go to state 14


State 8

    0 $accept: ROOT $end .

    $default  accept


State 9

    3 root_program: root_program external_declaration .

    $default  reduce using rule 3 (root_program)


State 10

   13 declaration: type_specifier SEMICOLON .

    $default  reduce using rule 13 (declaration)


State 11

    6 function_definition: type_specifier NAME . T_LBRACKET T_RBRACKET compound_statement
   12 declarator: NAME .

    T_LBRACKET  shift, and go to state 15

    $default  reduce using rule 12 (declarator)


State 12

    8 initialisation_declarator_list: initialisation_declarator_list . COMMA initialisation_declarator
   14 declaration: type_specifier initialisation_declarator_list . SEMICOLON

    SEMICOLON  shift, and go to state 16
    COMMA      shift, and go to state 17


State 13

    7 initialisation_declarator_list: initialisation_declarator .

    $default  reduce using rule 7 (initialisation_declarator_list)


State 14

    9 initialisation_declarator: declarator .

    $default  reduce using rule 9 (initialisation_declarator)


State 15

    6 function_definition: type_specifier NAME T_LBRACKET . T_RBRACKET compound_statement

    T_RBRACKET  shift, and go to state 18


State 16

   14 declaration: type_specifier initialisation_declarator_list SEMICOLON .

    $default  reduce using rule 14 (declaration)


State 17

    8 initialisation_declarator_list: initialisation_declarator_list COMMA . initialisation_declarator

    NAME  shift, and go to state 19

    initialisation_declarator  go to state 20
    declarator                 go to state 14


State 18

    6 function_definition: type_specifier NAME T_LBRACKET T_RBRACKET . compound_statement

    CUR_LBRACKET  shift, and go to state 21

    compound_statement  go to state 22


State 19

   12 declarator: NAME .

    $default  reduce using rule 12 (declarator)


State 20

    8 initialisation_declarator_list: initialisation_declarator_list COMMA initialisation_declarator .

    $default  reduce using rule 8 (initialisation_declarator_list)


State 21

   33 compound_statement: CUR_LBRACKET . CUR_RBRACKET
   34                   | CUR_LBRACKET . statement_list CUR_RBRACKET
   35                   | CUR_LBRACKET . declaration_list CUR_RBRACKET
   36                   | CUR_LBRACKET . declaration_list statement_list CUR_RBRACKET

    T_LBRACKET    shift, and go to state 23
    CUR_LBRACKET  shift, and go to state 21
    CUR_RBRACKET  shift, and go to state 24
    T_INT         shift, and go to state 1
    T_IF          shift, and go to state 25
    T_WHILE       shift, and go to state 26
    T_RETURN      shift, and go to state 27
    NAME          shift, and go to state 28
    NUMBER        shift, and go to state 29

    declaration_list       go to state 30
    declaration            go to state 31
    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 41
    statement              go to state 42
    statement_list         go to state 43
    compound_statement     go to state 44
    jump_statement         go to state 45
    expression_statement   go to state 46
    condition_statement    go to state 47
    iteration_statement    go to state 48
    type_specifier         go to state 49


State 22

    6 function_definition: type_specifier NAME T_LBRACKET T_RBRACKET compound_statement .

    $default  reduce using rule 6 (function_definition)


State 23

   17 primary_expression: T_LBRACKET . expression T_RBRACKET

    T_LBRACKET  shift, and go to state 23
    NAME        shift, and go to state 28
    NUMBER      shift, and go to state 29

    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 50


State 24

   33 compound_statement: CUR_LBRACKET CUR_RBRACKET .

    $default  reduce using rule 33 (compound_statement)


State 25

   40 condition_statement: T_IF . T_LBRACKET expression T_RBRACKET statement
   41                    | T_IF . T_LBRACKET expression T_RBRACKET statement T_ELSE statement

    T_LBRACKET  shift, and go to state 51


State 26

   42 iteration_statement: T_WHILE . T_LBRACKET expression T_RBRACKET statement

    T_LBRACKET  shift, and go to state 52


State 27

   37 jump_statement: T_RETURN . SEMICOLON
   38               | T_RETURN . expression SEMICOLON

    T_LBRACKET  shift, and go to state 23
    SEMICOLON   shift, and go to state 53
    NAME        shift, and go to state 28
    NUMBER      shift, and go to state 29

    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 54


State 28

   16 primary_expression: NAME .

    $default  reduce using rule 16 (primary_expression)


State 29

   15 primary_expression: NUMBER .

    $default  reduce using rule 15 (primary_expression)


State 30

   11 declaration_list: declaration_list . declaration
   35 compound_statement: CUR_LBRACKET declaration_list . CUR_RBRACKET
   36                   | CUR_LBRACKET declaration_list . statement_list CUR_RBRACKET

    T_LBRACKET    shift, and go to state 23
    CUR_LBRACKET  shift, and go to state 21
    CUR_RBRACKET  shift, and go to state 55
    T_INT         shift, and go to state 1
    T_IF          shift, and go to state 25
    T_WHILE       shift, and go to state 26
    T_RETURN      shift, and go to state 27
    NAME          shift, and go to state 28
    NUMBER        shift, and go to state 29

    declaration            go to state 56
    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 41
    statement              go to state 42
    statement_list         go to state 57
    compound_statement     go to state 44
    jump_statement         go to state 45
    expression_statement   go to state 46
    condition_statement    go to state 47
    iteration_statement    go to state 48
    type_specifier         go to state 49


State 31

   10 declaration_list: declaration .

    $default  reduce using rule 10 (declaration_list)


State 32

   18 postfix_expression: primary_expression .

    $default  reduce using rule 18 (postfix_expression)


State 33

   20 multiply_expression: postfix_expression .

    $default  reduce using rule 20 (multiply_expression)


State 34

   21 compare_expression: add_expression .

    $default  reduce using rule 21 (compare_expression)


State 35

   19 add_expression: multiply_expression .

    $default  reduce using rule 19 (add_expression)


State 36

   22 equal_expression: compare_expression .

    $default  reduce using rule 22 (equal_expression)


State 37

   23 bitwise_expression: equal_expression .

    $default  reduce using rule 23 (bitwise_expression)


State 38

   24 logical_expression: bitwise_expression .

    $default  reduce using rule 24 (logical_expression)


State 39

   25 assignment_expression: logical_expression .

    $default  reduce using rule 25 (assignment_expression)


State 40

   26 expression: assignment_expression .

    $default  reduce using rule 26 (expression)


State 41

   39 expression_statement: expression . SEMICOLON

    SEMICOLON  shift, and go to state 58


State 42

   32 statement_list: statement .

    $default  reduce using rule 32 (statement_list)


State 43

   34 compound_statement: CUR_LBRACKET statement_list . CUR_RBRACKET

    CUR_RBRACKET  shift, and go to state 59


State 44

   28 statement: compound_statement .

    $default  reduce using rule 28 (statement)


State 45

   27 statement: jump_statement .

    $default  reduce using rule 27 (statement)


State 46

   29 statement: expression_statement .

    $default  reduce using rule 29 (statement)


State 47

   30 statement: condition_statement .

    $default  reduce using rule 30 (statement)


State 48

   31 statement: iteration_statement .

    $default  reduce using rule 31 (statement)


State 49

   13 declaration: type_specifier . SEMICOLON
   14            | type_specifier . initialisation_declarator_list SEMICOLON

    SEMICOLON  shift, and go to state 10
    NAME       shift, and go to state 19

    initialisation_declarator_list  go to state 12
    initialisation_declarator       go to state 13
    declarator                      go to state 14


State 50

   17 primary_expression: T_LBRACKET expression . T_RBRACKET

    T_RBRACKET  shift, and go to state 60


State 51

   40 condition_statement: T_IF T_LBRACKET . expression T_RBRACKET statement
   41                    | T_IF T_LBRACKET . expression T_RBRACKET statement T_ELSE statement

    T_LBRACKET  shift, and go to state 23
    NAME        shift, and go to state 28
    NUMBER      shift, and go to state 29

    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 61


State 52

   42 iteration_statement: T_WHILE T_LBRACKET . expression T_RBRACKET statement

    T_LBRACKET  shift, and go to state 23
    NAME        shift, and go to state 28
    NUMBER      shift, and go to state 29

    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 62


State 53

   37 jump_statement: T_RETURN SEMICOLON .

    $default  reduce using rule 37 (jump_statement)


State 54

   38 jump_statement: T_RETURN expression . SEMICOLON

    SEMICOLON  shift, and go to state 63


State 55

   35 compound_statement: CUR_LBRACKET declaration_list CUR_RBRACKET .

    $default  reduce using rule 35 (compound_statement)


State 56

   11 declaration_list: declaration_list declaration .

    $default  reduce using rule 11 (declaration_list)


State 57

   36 compound_statement: CUR_LBRACKET declaration_list statement_list . CUR_RBRACKET

    CUR_RBRACKET  shift, and go to state 64


State 58

   39 expression_statement: expression SEMICOLON .

    $default  reduce using rule 39 (expression_statement)


State 59

   34 compound_statement: CUR_LBRACKET statement_list CUR_RBRACKET .

    $default  reduce using rule 34 (compound_statement)


State 60

   17 primary_expression: T_LBRACKET expression T_RBRACKET .

    $default  reduce using rule 17 (primary_expression)


State 61

   40 condition_statement: T_IF T_LBRACKET expression . T_RBRACKET statement
   41                    | T_IF T_LBRACKET expression . T_RBRACKET statement T_ELSE statement

    T_RBRACKET  shift, and go to state 65


State 62

   42 iteration_statement: T_WHILE T_LBRACKET expression . T_RBRACKET statement

    T_RBRACKET  shift, and go to state 66


State 63

   38 jump_statement: T_RETURN expression SEMICOLON .

    $default  reduce using rule 38 (jump_statement)


State 64

   36 compound_statement: CUR_LBRACKET declaration_list statement_list CUR_RBRACKET .

    $default  reduce using rule 36 (compound_statement)


State 65

   40 condition_statement: T_IF T_LBRACKET expression T_RBRACKET . statement
   41                    | T_IF T_LBRACKET expression T_RBRACKET . statement T_ELSE statement

    T_LBRACKET    shift, and go to state 23
    CUR_LBRACKET  shift, and go to state 21
    T_IF          shift, and go to state 25
    T_WHILE       shift, and go to state 26
    T_RETURN      shift, and go to state 27
    NAME          shift, and go to state 28
    NUMBER        shift, and go to state 29

    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 41
    statement              go to state 67
    compound_statement     go to state 44
    jump_statement         go to state 45
    expression_statement   go to state 46
    condition_statement    go to state 47
    iteration_statement    go to state 48


State 66

   42 iteration_statement: T_WHILE T_LBRACKET expression T_RBRACKET . statement

    T_LBRACKET    shift, and go to state 23
    CUR_LBRACKET  shift, and go to state 21
    T_IF          shift, and go to state 25
    T_WHILE       shift, and go to state 26
    T_RETURN      shift, and go to state 27
    NAME          shift, and go to state 28
    NUMBER        shift, and go to state 29

    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 41
    statement              go to state 68
    compound_statement     go to state 44
    jump_statement         go to state 45
    expression_statement   go to state 46
    condition_statement    go to state 47
    iteration_statement    go to state 48


State 67

   40 condition_statement: T_IF T_LBRACKET expression T_RBRACKET statement .
   41                    | T_IF T_LBRACKET expression T_RBRACKET statement . T_ELSE statement

    T_ELSE  shift, and go to state 69

    T_ELSE    [reduce using rule 40 (condition_statement)]
    $default  reduce using rule 40 (condition_statement)


State 68

   42 iteration_statement: T_WHILE T_LBRACKET expression T_RBRACKET statement .

    $default  reduce using rule 42 (iteration_statement)


State 69

   41 condition_statement: T_IF T_LBRACKET expression T_RBRACKET statement T_ELSE . statement

    T_LBRACKET    shift, and go to state 23
    CUR_LBRACKET  shift, and go to state 21
    T_IF          shift, and go to state 25
    T_WHILE       shift, and go to state 26
    T_RETURN      shift, and go to state 27
    NAME          shift, and go to state 28
    NUMBER        shift, and go to state 29

    primary_expression     go to state 32
    postfix_expression     go to state 33
    add_expression         go to state 34
    multiply_expression    go to state 35
    compare_expression     go to state 36
    equal_expression       go to state 37
    bitwise_expression     go to state 38
    logical_expression     go to state 39
    assignment_expression  go to state 40
    expression             go to state 41
    statement              go to state 70
    compound_statement     go to state 44
    jump_statement         go to state 45
    expression_statement   go to state 46
    condition_statement    go to state 47
    iteration_statement    go to state 48


State 70

   41 condition_statement: T_IF T_LBRACKET expression T_RBRACKET statement T_ELSE statement .

    $default  reduce using rule 41 (condition_statement)
